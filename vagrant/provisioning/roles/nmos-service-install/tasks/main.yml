---
# module: nmos-service-install/tasks
# description: Install NMOS service and its dependencies

- name: Print name of package being installed
  debug:
    var: package_name

- name: Clone repo
  git:
    repo: "{{ repo_url }}"
    dest: "/home/vagrant/{{ package_name }}"
    version: "{{ branch }}"

- name: Create NMOS log file for nmoscommon
  file: 
    path: /var/log/nmos.log
    state: touch
  when: package_name == "nmoscommon"

- name: Install python package and dependencies
  pip:
    name: "."
    chdir: "/home/vagrant/{{ package_name }}"
    extra_args: "--no-binary {{ package_name }}"
    executable: pip2

- name: Create service file
  copy:
    src: "/home/vagrant/{{ package_name }}/debian/{{ service_file }}"
    dest: /lib/systemd/system
    remote_src: yes
  when: service_file != []

- name: Change directory permissions for nmosauth config files
  file:
    path: /var/nmosauth
    owner: ipstudio
    group: ipstudio
    recurse: yes
  when: package_name == "nmos-auth"

- name: Create query service config directory
  file:
    path: '/etc/ips-regquery'
    owner: ipstudio
    group: ipstudio
    state: directory
  when: package_name == "registryquery"

- name: Create priority config file for query service
  template:
    src: config.j2
    dest: "/etc/ips-regquery/config.json"
    owner: ipstudio
    group: ipstudio
  when: package_name == "registryquery"

- name: Create registry service config directory
  file:
    path: '/etc/ips-regaggregator'
    owner: ipstudio
    group: ipstudio
    state: directory
  when: package_name == "registryaggregator"

- name: Create priority config file for registry service
  template:
    src: config.j2
    dest: "/etc/ips-regaggregator/config.json"
    owner: ipstudio
    group: ipstudio
  when: package_name == "registryaggregator"

- name: Restart service
  systemd:
    name: "{{ service_file }}"
    state: restarted
    enabled: true
    daemon_reload: true
  when: service_file != []

- name: Copy Apache2 conf file
  copy:
    src: "/home/vagrant/{{ package_name }}/debian/{{ reverse_proxy_file }}"
    dest: /etc/apache2/sites-available/
    owner: root
    group: root
    mode: '0644'
    remote_src: yes
  notify: Restart apache service
  when: reverse_proxy_file != []

- name: Enable Apache sites
  file:
    src: "/etc/apache2/sites-available/{{ reverse_proxy_file }}"
    dest: /etc/apache2/sites-enabled/{{ reverse_proxy_file }}
    state: link
  notify: Restart apache service
  when: reverse_proxy_file != []
